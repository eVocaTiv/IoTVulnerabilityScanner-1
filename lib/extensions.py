from sqlalchemy import *
import random 
from random import randrange, getrandbits
import time
from ipaddress import IPv4Address

def createTables():
	db = create_engine('sqlite:///iot.db')

	db.echo = True  # True means verbose log

	metadata = MetaData(db)

	cred = Table('Credentials', metadata,
	    Column('username', String, primary_key=True),
	    Column('password', String,primary_key = True)
	)
	cred.create()

	i = cred.insert()
	i.execute(username='pi', password='raspberry')

	scanResults = Table('ScanResults',metadata,
		Column('Timestamp', String, primary_key = True),
		Column('Vulnerable', String),
		Column('IPAddress', String, primary_key = True),
		Column('Device', String),
		Column('portNumber', Integer, primary_key = True),
		Column('protocolName', String),
		Column('os', String),
		Column('arch', String)
		)
		
	scanResults.create()

	users = Table('AdminCredentials',metadata,
		Column('username',String,primary_key = True),
		Column('password',String,primary_key = True),
		Column('emailID',String)
		)

	users.create()


def populateScanResultsDB():
	db = create_engine('sqlite:///iot.db')

	db.echo = True  # True means verbose log

	metadata = MetaData(db)

	scanResults = Table('ScanResults',metadata, autoload= True)

	ins = scanResults.insert()

	vul = ['Yes','No']
	dev = ['raspi']
	protocol = ['SSH','FTP','telnet','HTTP_GET']
	os_ = ['Linux','Mac OS X','BSD']
	arch_ = ['x64','x86_64']

	for i in range(100):
		vulnerable = random.choice(vul)
		device = random.choice(dev)
		_os = random.choice(os_)
		_arch = random.choice(arch_)
		portN = randrange(1024)
		times = randomize_time(start_timestamp,end_timestamp)
		ip_address = IP_generator()
		prot = random.choice(protocol)
		
		ins.execute(Timestamp = times, Vulnerable = vulnerable, IPAddress = ip_address, Device = device, portNumber = portN, protocolName = prot, os = _os, arch = _arch)

def randomize_time():
	start_timestamp = time.mktime(time.strptime('Jun 1 2010  01:33:00', '%b %d %Y %I:%M:%S'))
	end_timestamp = time.mktime(time.strptime('Dec 1 2018  12:33:00', '%b %d %Y %I:%M:%S'))
    return time.strftime('%b %d %Y %I:%M:%S', time.localtime(randrange(start_timestamp,end_timestamp)))

def IP_generator():
	bits = getrandbits(32) # generates an integer with 32 random bits
	addr = IPv4Address(bits) # instances an IPv4Address object from those bits
	addr_str = str(addr)
	return addr_str
