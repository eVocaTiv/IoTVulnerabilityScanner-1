from sqlalchemy import *
from .models import * 

class DatabaseHandler():
	def __init__(self):
		self.db = create_engine('sqlite:///iot.db')
		self.db.echo = False  # True means verbose log

	
	def credentialsFromDB(self):
		metadata = MetaData(self.db)
		credentials = Table('Credentials', metadata, autoload = True)
		s = credentials.select()
		rs = s.execute()
		rows  = rs.fetchall() #whats the query?
		creds = []
		for row in rows:
			cred = Credentials(row.username,row.password)
			creds.append(cred)
		return creds
		
	
	def insertIntoDefaulCredentials(self, username, password):
		metadata = MetaData(self.db)
		credentials = Table('Credentials', metadata, autoload = True)
		insert_cred = credentials.insert()
		insert_cred.execute(username = username, password = password)
		return None
		
	def deleteFromDefaultCredentials(self, username, password):
		metadata = MetaData(self.db)
		credentials = Table('Credentials', metadata, autoload = True)
		delete_cred = credentials.delete().where(and_(credentials.c.username == username, credentials.c.password == password))
		delete_cred.execute()
		return None
		
	def insertIntoScanResults(self, time, IPAddress, portNumber, protocolName, os, arch):
		metadata = MetaData(self.db)
		scan_results = Table('ScanResults', metadata, autoload = True)
		insert_scan_results = scan_results.insert()
		#Linux raspberrypi 4.14.69+ #1141 Mon Sep 10 15:13:50 BST 2018 armv6l GNU/Linux
		insert_scan_results.execute(Timestamp = time, IPAddress = IPAddress, portNumber = portNumber, protocolName = protocolName, os = os, arch = arch)
		return None
		
	def deleteFromScanResults(self, username, password):
		metadata = MetaData(self.db)
		scan_results = Table('ScanResults', metadata, autoload = True)
		delete_scan_results = scan_results.delete().where(and_()) #What's the deletion condition?
		delete_scan_results.execute()
		return None