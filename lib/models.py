from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
import ipaddress

class Person():

	def __init__(self, name, emailID):
		self.name = name
		self.emailID = emailID

	def getEmail(self):
		return self.emailID
	def getName(self):
		return self.name

class DeviceOwner(Person):

	def __init__(self, name, emailID):
		Person.__init__(self, name, emailID)
		# initializing empty list for iot devices
		self.IoTDevices = []
	def getDevices():
		return self.IoTDevices    
 
class Admin(Person):

	def __init__(self, name, emailID,credential):
		Person.__init__(self, name, emailID)
		self.credential = credential
		self.IoTDevices = []
		self.databaseHandler = []

	def verifyCredentials(self,cred):
		return self.credential.username == cred.username and self.credential.password == cred.password

	def getCredential(self):
		return self.credential

class Credentials():

	def __init__(self, username, password):
		self.username = username
		self.password = password

	def getUsername(self):
		return self.username
	def getPassword(self):
		return self.password

class ProtocolScanner():
	def __init__ (self, protocolName, portNumber, host):
		self.protocolName = protocolName
		self.portNumber = portNumber
		self.host = host

	def getProtocolName():
		return self.protocolName

	def getPortNumber():
		return self.portNumber

	def getHost():
		return self.host

	def fingerprint(self):
		sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		sock.settimeout(3)
		result = sock.connect_ex((str(self.host), self.portNumber))
		sock.shutdown(2)

	def verifyCredentials(self,credentials):
		raise NotImplementedError("Protocol needs to have a speicific type")

class FTP(ProtocolScanner):
	def __init__(self, protocolName, portNumber, host):
		super(FTP, self).__init__(protocolName, portNumber, host)
	#have to finish the function signature. And find out what's host and port
	def verifyCredentials(self, credentials):
		ftp = ftplib.FTP()
		ftp.connect(self.host, self.portNumber)

		ftp.login(credentials["username"], credentials["password"])
		evidence = ftp.retrlines('LIST')
		ftp.quit()

		return evidence

class IoTDevice():
	def __init__(self, deviceModel, deviceName, IPAddress, MACAddr, credentials, protocols, deviceOwner):
		self.deviceModel = deviceModel
		self.deviceName = deviceName
		self.IPAddress = IPAddress
		self.MACAddr = MACAddr
		self.credentials = credentials
		self.protocols = protocols
		self.deviceOwner = deviceOwner

	def verifyCredentials(self, protocol):
		if protocol.fingerprint():
			# some mechanism by which we get deviceModel -> protocol -> List<defaultCredentials>
			return protocol.verifyCredentials(credentials)
		return False


class DeviceScanner():
	def __init__(self):
		self.admin = Admin("admin name","admin email",Credentials("admin","password"))
		self.scanResults = []

	def scanRange(startIP, endIP):
		for ip_int in range(int(startIP), int(endIP)):
		    print(ipaddress.IPv4Address(ip_int))
		    res = attemptLogin(ip_int)

	def attemptLogin(IPAddress):
		ftpScanner = FTPScanner("FTP", 21, IPAddress)
		scanResult = ftpScanner.verifyCredentials()
		scanResults.append(scanResult)

	def displayScanResuts():
		#Display scan results
		#scanResults
		

