# from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
import ipaddress
from .scanners.scanner import ProtocolScanner
from .scanners.ssh import SSHScanner

DEBUG = True

class Person():

	def __init__(self, name, emailID):
		self.name = name
		self.emailID = emailID

	def getEmail(self):
		return self.emailID
	def getName(self):
		return self.name

class DeviceOwner(Person):

	def __init__(self, name, emailID):
		Person.__init__(self, name, emailID)
		# initializing empty list for iot devices
		self.IoTDevices = []
	def getDevices():
		return self.IoTDevices    
 
class Admin(Person):

	def __init__(self, name, emailID,credential):
		Person.__init__(self, name, emailID)
		self.credential = credential
		self.IoTDevices = []
		self.databaseHandler = []

	def verifyCredentials(self,cred):
		return self.credential.username == cred.username and self.credential.password == cred.password

	def getCredential(self):
		return self.credential

class Credentials():

	def __init__(self, username, password):
		self.username = username
		self.password = password

	def getUsername(self):
		return self.username
	def getPassword(self):
		return self.password

class IoTDevice():
	def __init__(self, deviceModel, deviceName, IPAddress, MACAddr, credentials, protocols, deviceOwner):
		self.deviceModel = deviceModel
		self.deviceName = deviceName
		self.IPAddress = IPAddress
		self.MACAddr = MACAddr
		self.credentials = credentials
		self.protocols = protocols
		self.deviceOwner = deviceOwner

	def verifyCredentials(self, protocolScanner):
		if protocolScanner.fingerprint() == 0:
			# some mechanism by which we get deviceModel -> protocol -> List<defaultCredentials>
			return protocolScanner.verifyCredentials(credentials)
		return False


class DeviceScanner():
	def __init__(self):
		self.admin = Admin("admin name","admin email",Credentials("admin","password"))
		self.scanResults = []

	def scanRange(self, startIP, endIP):
		for IPAddress in range(int(startIP), int(endIP)):
			print(ipaddress.IPv4Address(IPAddress))
			if DEBUG:
				print(IPAddress, protocols)
			res = attemptLogin(IPAddress)
			if DEBUG:
				print(IPAddress, protocols)
			
	def attemptLogin(self, IPAddress): #Device model (may) will be also a parameter
		# attempts login for various protocols
		protocols = ["SSH", "FTP"]
		for protocol in protocols:
			if DEBUG:
				print(protocol, IPAddress)
			if(protocol=="SSH"):
				sshScanner = SSHScanner("SSH", 22, IPAddress)
				cred = Credentials("pi", "raspberry") # This will happen from database..hardcoded for now
				scanResult = sshScanner.verifyCredentials(cred)
				print(scanResult)
				self.scanResults.append(scanResult)

	def displayScanResuts(self):
		#Display scan results
		print(self.scanResults)
		return None

ds = DeviceScanner()
ds.attemptLogin("169.254.201.6")
