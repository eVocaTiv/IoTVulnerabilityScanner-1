from flask import Flask
from flask import Flask, flash, redirect, render_template, request, session, abort
from lib.models import Admin, DeviceOwner, Credentials, ProtocolScanner
from flask_bootstrap import Bootstrap
import os

app = Flask(__name__)
host='0.0.0.0'
# Bootstrap(app)


@app.route("/")
def index():
    if not session.get('logged_in'):
        return render_template('login.html', loginFailed = False)
    else:
        # print(myPort)
        # verifyResult = protocolScanner.verifyCredentials( Credentials('admin', 'password'))
        return render_template('dashboard.html' , addDeviceToggle = False, deleteDeviceToggle = False)

@app.route('/login', methods=['POST','GET'])
def do_admin_login():
    if admin.verifyCredentials(Credentials(request.form['username'],request.form['password'])):
        session['logged_in'] = True
        return redirect("/")
    else:
        flash('wrong password!')
        return render_template('login.html', loginFailed = True) 
    
@app.route("/about")
def show_about():
    return render_template('about.html'     )    
@app.route("/logout")
def logout():
    session['logged_in'] = False
    return redirect("/")

@app.route("/addDeviceToggle", methods = ['GET'])
def showAddDevice():
	return render_template('dashboard.html' , addDeviceToggle = True, deleteDeviceToggle = False)

@app.route("/deleteDeviceToggle", methods = ['GET'])
def showDeleteDevice():
    return render_template('dashboard.html' , addDeviceToggle = False, deleteDeviceToggle = True)


@app.route("/scanresults",  methods=['GET'])
def display_scan_results():
	return render_template('scanresults.html')
	# will also pass the scan results object into this template.
@app.route("/notifyuser", methods=['POST'])
def notifyUser():
	# call notify user from service layer.
	#implement client side error handling.
	flash('Device Owner Notified!...')
	return render_template('dashboard.html', addDeviceToggle = False)
@app.route("/addNewDevice", methods=['POST'])
def addNewDevice():
	#handle exceptions and return appropriate message
    #call add new device method of service layer.
    #
    return "Device Added" +  "<br><br> <a href='/'> Go back </a>"

@app.route("/deleteDevice", methods=['POST'])
def deleteDevice():
    #handle exceptions and return appropriate message
    #call add new device method of service layer.
    #
    return "Device Deleted" +  "<br><br> <a href='/'> Go back </a>"


if __name__ == "__main__":
    loginFailed = False
    admin = Admin("admin name","admin email",Credentials("admin","password"))
    # protocolScanner = ProtocolScanner("Kunal Protocol" , "9997", "Kunal Host" )
    # myPort = protocolScanner.getPortNumber()
    app.secret_key = os.urandom(12)
    app.run(debug=True,host=host, port=4000)
    # create_app()
