from flask import Flask
from flask import Flask, flash, redirect, render_template, request, session, abort
from lib.models import Admin, DeviceOwner, Credentials, DeviceScanner
import os
import threading
import time
app = Flask(__name__)
host='0.0.0.0'
# Bootstrap(app)
loginCount = 0

@app.route("/")
def index():
    if not session.get('logged_in'):
        if(loginCount < 3):
            return render_template('login.html', loginFailed = False)
        else: 
            return render_template('retry.html')
    else:
        # print(myPort)
        # verifyResult = protocolScanner.verifyCredentials( Credentials('admin', 'password'))
        return render_template('dashboard.html' , addDeviceToggle = False, deleteDeviceToggle = False)

@app.route('/login', methods=['POST','GET'])
def do_admin_login():
    global loginCount
    if loginCount<3 :
        if admin.verifyCredentials(Credentials(request.form['username'],request.form['password'])):
            session['logged_in'] = True
            loginCount = 0
            return redirect("/")
        else:
            loginCount = loginCount + 1
            if loginCount<3:
                # flash('wrong password!')
                return render_template('login.html', loginFailed = True, retryOverflow = False)
            else:
                # loginCount = 0
                return render_template('retry.html')
    else: 
    #     # wait for 10 seconds.
    #     waitLock(5);
        # loginCount = 0;
        return render_template('retry.html')

@app.route('/retryLogin', methods=['POST'])       
def lock_ten_sec():
    global loginCount
    waitLock(10);
    loginCount = 0;
    return render_template('login.html', loginFaled = False, retryOverflow = False)

@app.route("/about")
def show_about():
    return render_template('about.html')    
@app.route("/logout")
def logout():
    session['logged_in'] = False
    return redirect("/")

@app.route("/addDeviceToggle", methods = ['GET'])
def showAddDevice():
    return render_template('dashboard.html' , addDeviceToggle = True, deleteDeviceToggle = False)

@app.route("/deleteDeviceToggle", methods = ['GET'])
def showDeleteDevice():
    return render_template('dashboard.html' , addDeviceToggle = False, deleteDeviceToggle = True)


@app.route("/scanresults",  methods=['POST'])
def display_scan_results():

    ds = DeviceScanner()
    # ds.scanRange("169.254.201.5", "169.254.201.7")

    ds.scanRange(request.form['start_ip'], request.form['end_ip'])
    return render_template('scanresults.html')
    # will also pass the scan results object into this template.
@app.route("/notifyuser", methods=['POST'])
def notifyUser():
    # call notify user from service layer.
    #implement client side error handling.
    flash('Device Owner Notified!...')
    return render_template('dashboard.html', addDeviceToggle = False)
@app.route("/addNewDevice", methods=['POST'])
def addNewDevice():
    #handle exceptions and return appropriate message
    #call add new device method of service layer.
    #
    return render_template('dashboard.html' , addDeviceToggle = False, deleteDeviceToggle = False, addedDevice = True)

@app.route("/deleteDevice", methods=['POST'])
def deleteDevice():
    #handle exceptions and return appropriate message
    #call add new device method of service layer.
    #
    return render_template('dashboard.html' , addDeviceToggle = False, deleteDeviceToggle = False, deletedDevice = True)


lock = threading.Lock()
cond = threading.Condition(threading.Lock())

def waitLock(timeout):
    with cond:
        current_time = start_time = time.time()
        while current_time < start_time + timeout:
            if lock.acquire(False):
                return True
            else:
                cond.wait(timeout - current_time + start_time)
                current_time = time.time()
    return False


if __name__ == "__main__":
    loginFailed = False
    loginCount = 0
    retryOverflow = False
    admin = Admin("admin name","admin email",Credentials("admin","password"))
    # protocolScanner = ProtocolScanner("Kunal Protocol" , "9997", "Kunal Host" )
    # myPort = protocolScanner.getPortNumber()
    app.secret_key = os.urandom(12)
    app.run(debug=True,host=host, port=4000)
    # create_app()
